// Helper para extrair dados estruturados de planilhas com IA SUPER INTELIGENTE
export interface ExtractedClient {
  nome: string;
  email: string;
  telefone: string;
  sexo?: "male" | "female";
}

export function extractClientsFromText(text: string): ExtractedClient[] {
  console.log("üìä üß† EXTRA√á√ÉO INTELIGENTE DE CLIENTES - INICIADA");
  const clients: ExtractedClient[] = [];

  // Normalizar texto mantendo acentos e tabs
  const normalizedText = text
    .replace(/[^\w\s@.,\-+()√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á\t]/g, " ")
    .replace(/\s+/g, " ")
    .trim();

  console.log(
    `üìù Texto normalizado (primeiros 300 chars): ${normalizedText.substring(0, 300)}...`,
  );

  // NOVA ESTRAT√âGIA: Processar linha por linha (formato tabular)
  const lines = normalizedText
    .split(/\n|\r\n|\r/)
    .filter((line) => line.trim().length > 10);

  console.log(`ÔøΩ Total de linhas encontradas: ${lines.length}`);

  lines.forEach((line, index) => {
    console.log(`\nüîç === PROCESSANDO LINHA ${index + 1} ===`);
    console.log(`üìù Linha: "${line}"`);

    // DETECTAR SE A LINHA CONT√âM M√öLTIPLOS CLIENTES
    const multipleClients = extractMultipleClientsFromSingleLine(line);

    if (multipleClients.length > 0) {
      multipleClients.forEach((client, clientIndex) => {
        // Verificar duplicatas por email
        const isDuplicate = clients.some(
          (existing) => existing.email === client.email,
        );
        if (!isDuplicate) {
          clients.push(client);
          console.log(
            `‚úÖ Cliente ${clientIndex + 1} da linha ${index + 1} adicionado: ${client.nome} (${client.sexo}) - ${client.email}`,
          );
        } else {
          console.log(`‚ö†Ô∏è Cliente duplicado ignorado: ${client.email}`);
        }
      });
    } else {
      console.log(`‚ùå Linha ${index + 1} n√£o cont√©m dados v√°lidos de cliente`);
    }
  });

  console.log(
    `\nüéâ EXTRA√á√ÉO CONCLU√çDA: ${clients.length} clientes extra√≠dos de ${lines.length} linhas processadas`,
  );
  return clients;
}

// NOVA FUN√á√ÉO: Extrair m√∫ltiplos clientes de uma √∫nica linha
function extractMultipleClientsFromSingleLine(line: string): ExtractedClient[] {
  const clients: ExtractedClient[] = [];

  // Usar regex para encontrar padr√µes: Nome + Email + Telefone
  // Padr√£o: Nome (pode ter espa√ßos e acentos) + email + telefone
  const clientPattern =
    /([A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√áa-z√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß\s]{2,40}?)\s*([\w\.-√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß]+@[\w\.-]+\.\w+)\s*(\(?\d{2}\)?\s*\d{4,5}[-\s]?\d{4})/g;

  const matches = Array.from(line.matchAll(clientPattern));

  console.log(`ÔøΩ ${matches.length} padr√µes cliente encontrados na linha`);

  matches.forEach((match, index) => {
    const [fullMatch, rawName, email, phone] = match;

    console.log(`\nüîç === PROCESSANDO CLIENTE ${index + 1} ===`);
    console.log(`üìù Match completo: "${fullMatch}"`);
    console.log(`üë§ Nome bruto: "${rawName}"`);
    console.log(`üìß Email: "${email}"`);
    console.log(`üìû Telefone bruto: "${phone}"`);

    // Limpar o nome
    const cleanName = rawName
      .trim()
      .replace(/\s+/g, " ")
      .replace(/^[^\w\s√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]+/, "")
      .replace(/[^\w\s√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]+$/, "");

    // Verificar se o nome √© v√°lido (pelo menos 2 palavras)
    const nameWords = cleanName.split(" ").filter((word) => word.length > 0);
    if (nameWords.length < 2) {
      console.log(`‚ùå Nome inv√°lido (menos de 2 palavras): "${cleanName}"`);
      return;
    }

    // Pegar apenas as 2 primeiras palavras (nome e sobrenome)
    const finalName = nameWords.slice(0, 2).join(" ");

    // Limpar telefone
    const cleanPhone = phone.replace(/\D/g, "");

    // Detectar g√™nero
    const gender = detectGenderIntelligently(finalName, "");

    const client: ExtractedClient = {
      nome: finalName,
      email: email.toLowerCase(),
      telefone: cleanPhone,
      sexo: gender,
    };

    console.log(`‚ú® CLIENTE ${index + 1} LIMPO:`, client);
    clients.push(client);
  });

  // Se n√£o encontrou com regex, tentar m√©todo alternativo
  if (clients.length === 0) {
    console.log(`‚ö†Ô∏è Regex n√£o funcionou, tentando m√©todo alternativo...`);
    return extractMultipleClientsAlternative(line);
  }

  return clients;
}

// M√©todo alternativo caso a regex principal falhe
function extractMultipleClientsAlternative(line: string): ExtractedClient[] {
  const clients: ExtractedClient[] = [];

  // Dividir por email como separador e processar cada segmento
  const emailPattern = /[\w\.-√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß]+@[\w\.-]+\.\w+/gi;
  const emails = Array.from(line.matchAll(emailPattern));

  if (emails.length === 0) return clients;

  // Para cada email, extrair o contexto ao redor
  emails.forEach((emailMatch, index) => {
    const email = emailMatch[0].toLowerCase();
    const emailIndex = emailMatch.index!;

    // Determinar o in√≠cio e fim do contexto deste cliente
    let contextStart = 0;
    let contextEnd = line.length;

    // Se n√£o √© o primeiro email, come√ßar ap√≥s o email anterior
    if (index > 0) {
      const prevEmailIndex =
        emails[index - 1].index! + emails[index - 1][0].length;
      contextStart = prevEmailIndex;
    }

    // Se n√£o √© o √∫ltimo email, terminar antes do pr√≥ximo email
    if (index < emails.length - 1) {
      contextEnd = emails[index + 1].index!;
    }

    const context = line.substring(contextStart, contextEnd);
    console.log(`üîç Contexto para ${email}: "${context}"`);

    // Extrair telefone do contexto
    const phoneMatch = context.match(/\(?\d{2}\)?\s*\d{4,5}[-\s]?\d{4}/);
    if (!phoneMatch) {
      console.log(`‚ùå Nenhum telefone no contexto de ${email}`);
      return;
    }

    const cleanPhone = phoneMatch[0].replace(/\D/g, "");

    // Extrair nome: pegar palavras antes do email no contexto
    const beforeEmailInContext = context.substring(0, context.indexOf(email));
    const nameWords = beforeEmailInContext
      .replace(/[^\w\s√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]/g, " ")
      .replace(/\d+/g, " ")
      .split(/\s+/)
      .filter((word) => word.length > 1)
      .slice(-2); // Pegar as √∫ltimas 2 palavras

    if (nameWords.length < 2) {
      console.log(`‚ùå Nome insuficiente para ${email}`);
      return;
    }

    const name = nameWords.join(" ");
    const gender = detectGenderIntelligently(name, "");

    const client: ExtractedClient = {
      nome: name,
      email: email,
      telefone: cleanPhone,
      sexo: gender,
    };

    console.log(`‚ú® CLIENTE ALTERNATIVO ${index + 1}:`, client);
    clients.push(client);
  });

  return clients;
}

// NOVA FUN√á√ÉO OTIMIZADA PARA FORMATO TABULAR
function extractClientFromLine(line: string): ExtractedClient | null {
  console.log(`üß† Analisando linha: "${line}"`);

  // ETAPA 1: Encontrar EMAIL (sempre presente e √∫nico por linha)
  const emailMatch = line.match(/[\w\.-√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß]+@[\w\.-]+\.\w+/i);
  if (!emailMatch) {
    console.log(`‚ùå Nenhum email encontrado na linha`);
    return null;
  }

  const email = emailMatch[0].toLowerCase();
  console.log(`üìß Email identificado: ${email}`);

  // ETAPA 2: Encontrar TELEFONE
  const phoneMatch = line.match(/\(?\d{2}\)?\s*\d{4,5}[-\s]?\d{4}/);
  if (!phoneMatch) {
    console.log(`üìû Nenhum telefone encontrado na linha`);
    return null;
  }

  const phone = phoneMatch[0];
  const cleanPhone = phone.replace(/\D/g, "");
  console.log(`ÔøΩ Telefone identificado: ${phone} -> ${cleanPhone}`);

  // ETAPA 3: Extrair NOME (tudo antes do email, excluindo lixo)
  const beforeEmail = line.substring(0, line.indexOf(emailMatch[0])).trim();
  console.log(`üìù Texto antes do email: "${beforeEmail}"`);

  const name = extractNameFromTabularLine(beforeEmail, phone);

  if (!name) {
    console.log(`üë§ Nenhum nome v√°lido encontrado`);
    return null;
  }

  // ETAPA 4: Detectar G√äNERO
  const gender = detectGenderIntelligently(name, "");

  const result = {
    nome: name,
    email: email,
    telefone: cleanPhone,
    sexo: gender,
  };

  console.log(`‚ú® CLIENTE EXTRA√çDO DA LINHA:`, result);
  return result;
}

// FUN√á√ÉO OTIMIZADA PARA EXTRAIR NOMES DE FORMATO TABULAR
function extractNameFromTabularLine(
  text: string,
  phone: string,
): string | null {
  console.log(`ÔøΩ Extraindo nome de texto tabular: "${text}"`);

  // Remover telefone se estiver misturado
  let cleanText = text.replace(phone, "").trim();

  // Remover caracteres especiais e m√∫ltiplos espa√ßos
  cleanText = cleanText
    .replace(/[^\w\s\-√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]/g, " ")
    .replace(/\s+/g, " ")
    .trim();

  // Lista de palavras que N√ÉO s√£o nomes (expandida com TODOS os estados brasileiros)
  const stopWords = [
    "adicione",
    "estes",
    "clientes",
    "cliente",
    "nome",
    "email",
    "telefone",
    "phone",
    "masculino",
    "feminino",
    "homem",
    "mulher",
    "male",
    "female",
    "sexo",
    "dados",
    "lista",
    "cadastro",
    "informacoes",
    "informa√ß√µes",
    "estado",
    "uf",
    // TODOS OS ESTADOS BRASILEIROS (siglas)
    "am",
    "ac",
    "al",
    "ap",
    "ba",
    "ce",
    "df",
    "es",
    "go",
    "ma",
    "mt",
    "ms",
    "mg",
    "pa",
    "pb",
    "pr",
    "pe",
    "pi",
    "rj",
    "rn",
    "rs",
    "ro",
    "rr",
    "sc",
    "sp",
    "se",
    "to",
    // Estados por extenso mais comuns
    "amazonas",
    "acre",
    "alagoas",
    "amapa",
    "bahia",
    "ceara",
    "goias",
    "maranhao",
    "mato",
    "grosso",
    "minas",
    "gerais",
    "para",
    "paraiba",
    "parana",
    "pernambuco",
    "piaui",
    "janeiro",
    "grande",
    "norte",
    "sul",
    "rondonia",
    "roraima",
    "santa",
    "catarina",
    "paulo",
    "sergipe",
    "tocantins",
  ];

  // Dividir em palavras e filtrar
  const words = cleanText.split(/\s+/).filter((word) => {
    const wordLower = word.toLowerCase();
    return (
      word.length >= 2 &&
      !stopWords.includes(wordLower) &&
      !/^\d+$/.test(word) && // n√£o √© s√≥ n√∫meros
      !/^[()@,.\-_]+$/.test(word) && // n√£o √© s√≥ s√≠mbolos
      /^[a-z√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]+$/i.test(word) // s√≥ letras v√°lidas
    );
  });

  if (words.length === 0) {
    console.log(`‚ùå Nenhuma palavra v√°lida encontrada ap√≥s filtros`);
    return null;
  }

  // Para formato tabular, pegar TODAS as palavras v√°lidas como nome
  // (n√£o usar slice(-4) como antes, pois pode cortar nomes)
  const name = words.join(" ").trim();

  // Validar se parece um nome real (pelo menos 2 palavras OU nome conhecido)
  if (name.split(" ").length >= 2 || isKnownName(name.split(" ")[0])) {
    console.log(`üë§ Nome extra√≠do: "${name}"`);
    return name;
  }

  console.log(`‚ùå Nome rejeitado (muito curto ou inv√°lido): "${name}"`);
  return null;
}

// Fun√ß√£o auxiliar para verificar se √© um nome conhecido
function isKnownName(firstName: string): boolean {
  const knownNames = [
    "maria",
    "ana",
    "jo√£o",
    "jos√©",
    "carlos",
    "paulo",
    "pedro",
    "francisco",
    "marcos",
    "rafael",
    "daniel",
    "bruno",
    "felipe",
    "ricardo",
    "andr√©",
    "gabriel",
    "lucas",
    "fernando",
    "rodrigo",
    "gustavo",
    "leonardo",
    "fernanda",
    "juliana",
    "adriana",
    "sandra",
    "regina",
    "m√¥nica",
    "patricia",
    "vanessa",
    "beatriz",
    "roberta",
    "camila",
    "gabriela",
    "amanda",
    "renata",
    "cl√°udia",
    "thiago",
    "patr√≠cia",
  ];

  return knownNames.includes(firstName.toLowerCase());
}

// FUN√á√ÉO INTELIGENTE PARA EXTRAIR NOMES (mantida para compatibilidade)
function extractNameFromText(text: string, phone: string): string | null {
  // Redirecionar para a nova fun√ß√£o otimizada
  return extractNameFromTabularLine(text, phone);
}

// FUN√á√ÉO SUPER INTELIGENTE PARA DETECTAR G√äNERO
function detectGenderIntelligently(
  name: string,
  context: string,
): "male" | "female" {
  console.log(`üöª Detectando g√™nero para: "${name}"`);

  const nameLower = name.toLowerCase();
  const contextLower = context.toLowerCase();

  // 1. INDICADORES EXPL√çCITOS NO CONTEXTO (mais confi√°veis)
  const explicitFemale = /\b(mulher|feminino|female|f)\b/i.test(contextLower);
  const explicitMale = /\b(homem|masculino|male|m)\b/i.test(contextLower);

  if (explicitFemale && !explicitMale) {
    console.log(`üöª Sexo EXPL√çCITO detectado: FEMININO (contexto)`);
    return "female";
  }
  if (explicitMale && !explicitFemale) {
    console.log(`üöª Sexo EXPL√çCITO detectado: MASCULINO (contexto)`);
    return "male";
  }

  // 2. AN√ÅLISE INTELIGENTE DO PRIMEIRO NOME
  const firstName = nameLower.split(" ")[0];

  // Base de dados expandida de nomes brasileiros
  const definiteFemaleNames = [
    "maria",
    "ana",
    "francisca",
    "antonia",
    "adriana",
    "juliana",
    "m√°rcia",
    "fernanda",
    "d√©bora",
    "roseli",
    "raimunda",
    "sandra",
    "regina",
    "l√∫cia",
    "angela",
    "m√¥nica",
    "patricia",
    "isabel",
    "isabela",
    "vera",
    "sonia",
    "carla",
    "rose",
    "cristina",
    "simone",
    "denise",
    "fatima",
    "f√°tima",
    "rejane",
    "claudia",
    "cl√°udia",
    "luciana",
    "vanessa",
    "silvia",
    "s√≠lvia",
    "beatriz",
    "roberta",
    "leticia",
    "let√≠cia",
    "camila",
    "michele",
    "amanda",
    "aline",
    "gabriela",
    "andrea",
    "andr√©a",
    "viviane",
    "eliana",
    "solange",
    "rita",
    "edna",
    "elizabete",
    "terezinha",
    "aparecida",
    "cleide",
    "rita",
    "rosana",
    "ros√¢ngela",
    "marta",
    "lilian",
    "l√≠via",
    "larissa",
    "kelly",
    "karina",
  ];

  const definiteMaleNames = [
    "jos√©",
    "jo√£o",
    "antonio",
    "ant√¥nio",
    "francisco",
    "carlos",
    "paulo",
    "pedro",
    "lucas",
    "luis",
    "lu√≠s",
    "marcos",
    "rafael",
    "daniel",
    "marcelo",
    "bruno",
    "eduardo",
    "felipe",
    "raimundo",
    "roberto",
    "manoel",
    "manuel",
    "s√©rgio",
    "sergio",
    "jorge",
    "fernando",
    "f√°bio",
    "fabio",
    "andr√©",
    "andre",
    "diego",
    "ricardo",
    "alexandre",
    "rodrigo",
    "gustavo",
    "leandro",
    "thiago",
    "mateus",
    "gabriel",
    "vin√≠cius",
    "vinicius",
    "leonardo",
    "renan",
    "caio",
    "guilherme",
    "renato",
    "igor",
    "william",
    "wellington",
    "wagner",
    "valdeci",
    "valdir",
    "victor",
    "vitor",
    "washington",
  ];

  if (definiteFemaleNames.includes(firstName)) {
    console.log(`üöª Nome FEMININO identificado: ${firstName}`);
    return "female";
  }

  if (definiteMaleNames.includes(firstName)) {
    console.log(`üöª Nome MASCULINO identificado: ${firstName}`);
    return "male";
  }

  // 3. AN√ÅLISE POR TERMINA√á√ïES (com mais intelig√™ncia)
  if (
    firstName.endsWith("a") &&
    !firstName.endsWith("ista") &&
    firstName.length > 3
  ) {
    console.log(
      `üöª Termina√ß√£o feminina detectada: ${firstName} (termina com 'a')`,
    );
    return "female";
  }

  // 4. PADR√ïES BRASILEIROS ESPEC√çFICOS
  if (/^(jos√©|jo√£o|pedro|paulo|carlos|marcos|rafael|daniel)/.test(firstName)) {
    console.log(`üöª Padr√£o masculino brasileiro: ${firstName}`);
    return "male";
  }

  if (/^(maria|ana|sandra|claudia|patricia|monica)/.test(firstName)) {
    console.log(`üöª Padr√£o feminino brasileiro: ${firstName}`);
    return "female";
  }

  // 5. DEFAULT: masculino (estatisticamente mais prov√°vel se n√£o conseguir determinar)
  console.log(
    `ü§∑ G√™nero n√£o determinado para "${firstName}" - usando padr√£o masculino`,
  );
  return "male";
}

// ================================
// FUN√á√ïES DE COMPATIBILIDADE (antigas fun√ß√µes mantidas caso sejam usadas em outro lugar)
// ================================

export function detectClientDataInText(text: string): boolean {
  const hasEmail = /[\w\.-]+@[\w\.-]+\.\w+/i.test(text);
  const hasPhone = /\(?\d{2}\)?\s*\d{4,5}[-\s]?\d{4}/.test(text);
  const hasNames =
    /\b[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á][a-z√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß]+(\s+[A-Z√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á][a-z√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß]+)*\b/.test(
      text,
    );

  return hasEmail && hasPhone && hasNames;
}

export function inferGenderFromName(name: string): "male" | "female" {
  return detectGenderIntelligently(name, "");
}

export function formatClientsForAI(clients: ExtractedClient[]): string {
  if (clients.length === 0) return "Nenhum cliente encontrado.";

  return clients
    .map(
      (client, index) =>
        `${index + 1}. ${client.nome} - ${client.email} - ${client.telefone} - Sexo: ${client.sexo === "male" ? "Masculino" : "Feminino"}`,
    )
    .join("\n");
}
