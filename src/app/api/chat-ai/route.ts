import { GoogleGenAI } from "@google/genai";
import { env } from "@/lib/env";
import { NextRequest } from "next/server";
import { headers } from "next/headers";
import { auth } from "@/lib/auth";
import { chatWithAiSchema } from "@/actions/chat-with-ai/schema";
import { AI_ACTIONS, executeAIAction } from "@/actions/ai-actions";
import {
  detectClientDataInText,
  extractClientsFromText,
  formatClientsForAI,
} from "@/helpers/extract-data";

// Fun√ß√£o para timeout
function withTimeout<T>(promise: Promise<T>, timeoutMs: number): Promise<T> {
  return Promise.race([
    promise,
    new Promise<never>((_, reject) =>
      setTimeout(
        () =>
          reject(new Error("Timeout: A opera√ß√£o demorou mais que o esperado")),
        timeoutMs,
      ),
    ),
  ]);
}

export async function POST(request: NextRequest) {
  console.log("üöÄ API Route iniciada - /api/chat-ai (Gemini 2.5 Flash)");

  try {
    // *** AUTENTICA√á√ÉO REAL ***
    const session = await auth.api.getSession({
      headers: await headers(),
    });

    if (!session?.user) {
      console.error("‚ùå Usu√°rio n√£o autenticado");
      return Response.json(
        { success: false, error: "Usu√°rio n√£o autenticado" },
        { status: 401 },
      );
    }

    if (!session?.user.clinic?.id) {
      console.error("‚ùå Cl√≠nica n√£o encontrada");
      return Response.json(
        { success: false, error: "Cl√≠nica n√£o encontrada" },
        { status: 400 },
      );
    }

    const businessId = session.user.clinic.id;
    const userId = session.user.id;

    console.log(`üè¢ Business ID: ${businessId}`);
    console.log(`üë§ User ID: ${userId}`);

    const body = await request.json();

    // Validar input usando o schema
    const result = chatWithAiSchema.safeParse(body);
    if (!result.success) {
      console.error("‚ùå Validation error:", result.error);
      return Response.json(
        { success: false, error: "Dados inv√°lidos" },
        { status: 400 },
      );
    }

    const { message, conversationHistory, attachments } = result.data;

    // Verificar se a API key est√° definida
    if (!env.GEMINI_API_KEY) {
      console.error("‚ùå GEMINI_API_KEY n√£o encontrada");
      return Response.json(
        {
          success: false,
          error: "API key n√£o configurada",
        },
        { status: 500 },
      );
    }

    // Log para debug
    console.log("‚úÖ API Key encontrada, length:", env.GEMINI_API_KEY.length);
    console.log("üìù Message:", message.substring(0, 50) + "...");
    console.log("üí¨ History length:", conversationHistory.length);
    console.log("üìé Attachments:", attachments?.length || 0, "arquivos");

    console.log("üîß Inicializando GoogleGenAI...");
    const ai = new GoogleGenAI({});

    // Construir o conte√∫do da mensagem incluindo anexos
    let messageContent = message;

    // Processar anexos se houver
    if (attachments && attachments.length > 0) {
      console.log("üîç Processando anexos...");

      const attachmentAnalysis = attachments
        .map((attachment, index) => {
          const size = Math.round(attachment.size / 1024); // KB

          // Log detalhado do anexo
          console.log(`üìé Anexo ${index + 1}:`, {
            name: attachment.name,
            type: attachment.type,
            size: `${size}KB`,
            hasContent: !!attachment.content,
            contentLength: attachment.content?.length || 0,
            contentPreview:
              attachment.content?.substring(0, 100) + "..." || "NO CONTENT",
          });

          if (attachment.type === "image") {
            return `\n\n--- ANEXO ${index + 1}: IMAGEM ---
Nome: ${attachment.name}
Tamanho: ${size}KB
Tipo: Imagem

ATEN√á√ÉO: Uma imagem foi anexada (${attachment.name}). 

Como sou especializado em an√°lise de texto e documentos, pe√ßa ao usu√°rio para:
1. Descrever o conte√∫do da imagem
2. Copiar qualquer texto vis√≠vel na imagem
3. Explicar que tipo de an√°lise precisa da imagem

Assim posso fornecer insights espec√≠ficos baseados nas informa√ß√µes que voc√™ me fornecer sobre a imagem.`;
          } else {
            // Verificar se o documento cont√©m dados de clientes
            const containsClientData = detectClientDataInText(
              attachment.content || "",
            );

            let documentAnalysis = `\n\n--- ANEXO ${index + 1}: DOCUMENTO ---
Nome: ${attachment.name}
Tamanho: ${size}KB
Tipo: Documento

CONTE√öDO COMPLETO DO DOCUMENTO PARA AN√ÅLISE:
======================================
${attachment.content}
======================================

IMPORTANTE: O conte√∫do acima √© um documento real que foi anexado pelo usu√°rio. Analise este conte√∫do diretamente e forne√ßa insights de neg√≥cios baseados nas informa√ß√µes apresentadas.`;

            if (containsClientData) {
              const extractedClients = extractClientsFromText(
                attachment.content || "",
              );
              if (extractedClients.length > 0) {
                documentAnalysis += `

üéØ DADOS ESTRUTURADOS DETECTADOS:
${formatClientsForAI(extractedClients)}

üí° AUTOMA√á√ÉO DISPON√çVEL: Este documento cont√©m dados de clientes que podem ser importados automaticamente no sistema. Se o usu√°rio solicitar "adicione estes clientes" ou similar, use a a√ß√£o add_clients com os dados extra√≠dos.`;
              }
            }

            return documentAnalysis;
          }
        })
        .join("");

      messageContent += attachmentAnalysis;
    }

    // Construir o hist√≥rico da conversa
    const contents = [];

    // Adicionar hist√≥rico se houver
    if (conversationHistory.length > 0) {
      // Filtrar o hist√≥rico para remover mensagens de boas-vindas
      const validHistory = conversationHistory.filter((msg) => {
        if (msg.role === "assistant" && msg.content.startsWith("Ol√°! üëã")) {
          return false;
        }
        return true;
      });

      // Adicionar hist√≥rico ao conte√∫do
      validHistory.forEach((msg) => {
        contents.push({
          role: msg.role === "assistant" ? "model" : "user",
          parts: [{ text: msg.content }],
        });
      });
    }

    // Adicionar a mensagem atual
    contents.push({
      role: "user",
      parts: [{ text: messageContent }],
    });

    console.log("üìù Hist√≥rico processado:", contents.length, "mensagens");
    console.log("üì§ Enviando mensagem para Gemini 2.5 Flash...");

    // Preparar lista de actions dispon√≠veis
    const actionsDescription = Object.entries(AI_ACTIONS)
      .map(
        ([key, action]) =>
          `- ${action.name} (${key}): ${action.description}
  Par√¢metros: ${JSON.stringify(action.parameters)}`,
      )
      .join("\n");

    // Usar timeout de 15 MINUTOS (para processar muitos clientes)
    const response = await withTimeout(
      ai.models.generateContent({
        model: "gemini-2.5-pro",
        contents: [
          {
            role: "user",
            parts: [
              {
                text: `SISTEMA: Voc√™ √© Bedash AI, um consultor de neg√≥cios especializado em an√°lise de documentos e automatiza√ß√£o de processos empresariais.

SUAS CAPACIDADES PRINCIPAIS:
- Analisar documentos e extrair insights de neg√≥cios
- Fornecer conselhos pr√°ticos e acion√°veis  
- Interpretar dados financeiros, relat√≥rios e planilhas
- Identificar oportunidades e riscos empresariais
- O sistema possui automa√ß√£o inteligente que detecta solicita√ß√µes automaticamente

ü§ñ AUTOMA√á√ÉO INTELIGENTE ATIVADA:
- Quando o usu√°rio anexar planilhas/documentos e disser "adicione estes clientes", o sistema automaticamente processar√° e importar√° os dados
- N√£o √© necess√°rio gerar JSON ou comandos especiais
- A automa√ß√£o funciona por detec√ß√£o de linguagem natural

üí° INSTRU√á√ïES IMPORTANTES:
- Analise sempre o conte√∫do dos documentos anexados
- Seja √∫til e forne√ßa insights pr√°ticos sobre neg√≥cios
- Se o usu√°rio solicitar importa√ß√£o de dados, explique que a automa√ß√£o j√° est√° funcionando
- Forne√ßa an√°lises claras e acion√°veis dos documentos
- Use linguagem profissional mas amig√°vel

üìã COMO VOC√ä DEVE RESPONDER:
- Analise documentos diretamente e forne√ßa insights
- Responda perguntas sobre neg√≥cios de forma clara
- Se usu√°rio quiser importar dados, diga que o sistema j√° est√° processando automaticamente
- Seja preciso e √∫til em suas an√°lises
- Responda em portugu√™s brasileiro
- Seja direto, pr√°tico e √∫til
- M√°ximo 500 palavras por resposta

MENSAGEM E CONTE√öDO DO USU√ÅRIO:
${messageContent}`,
              },
            ],
          },
        ],
      }),
      900000, // 15 MINUTOS (para processar muitos clientes)
    );

    console.log("üì• Processando resposta...");
    console.log("üîç Response object:", typeof response);

    // Obter o texto da resposta corretamente
    let aiResponse = "";
    try {
      if (response && response.text) {
        aiResponse = response.text;
      } else {
        console.error("‚ùå Response object n√£o cont√©m text:", response);
        aiResponse = "Erro: resposta vazia do Gemini";
      }
    } catch (responseError) {
      console.error("‚ùå Erro ao obter texto da resposta:", responseError);
      aiResponse = "Erro ao processar resposta da IA";
    }

    console.log("‚úÖ Resposta recebida:", aiResponse.length, "caracteres");
    console.log(
      "üìù Primeiros 200 chars da resposta:",
      aiResponse.substring(0, 200),
    );

    let finalResponse = aiResponse;

    // *** AUTOMA√á√ÉO INTELIGENTE SEM JSON ***
    // Detectar automaticamente se o usu√°rio quer adicionar clientes
    const isAddClientsRequest =
      /adicione?\s+estes?\s+clientes?|import[ae]?\s+os?\s+clientes?|adicionar\s+clientes?|cadastre?\s+estes?\s+clientes?/i.test(
        message,
      );

    if (isAddClientsRequest) {
      console.log(
        "üéØ DETEC√á√ÉO AUTOM√ÅTICA: Solicita√ß√£o para adicionar clientes",
      );

      // Procurar por dados de clientes em anexos E na mensagem
      let allExtractedClients: any[] = [];
      let processedFiles: string[] = [];

      // 1. Verificar anexos primeiro (se houver)
      if (attachments && attachments.length > 0) {
        for (const attachment of attachments) {
          console.log(
            `üìé Processando anexo: ${attachment.name} (tipo: ${attachment.type})`,
          );
          console.log(
            `üìÑ Conte√∫do dispon√≠vel: ${!!attachment.content} (${attachment.content?.length || 0} chars)`,
          );

          if (attachment.type === "document" && attachment.content) {
            console.log(
              `üìù Primeiros 300 caracteres do anexo: ${attachment.content.substring(0, 300)}...`,
            );

            const containsClientData = detectClientDataInText(
              attachment.content,
            );
            console.log(
              `üîç Detec√ß√£o de dados de clientes: ${containsClientData}`,
            );

            if (containsClientData) {
              console.log(
                `‚úÖ Dados de clientes detectados em ${attachment.name}`,
              );
              const clients = extractClientsFromText(attachment.content);
              allExtractedClients = [...allExtractedClients, ...clients];
              processedFiles.push(attachment.name);
              console.log(
                `üìä Extra√≠dos ${clients.length} clientes de ${attachment.name}`,
              );
            } else {
              console.log(
                `‚ùå Nenhum dado de cliente detectado em ${attachment.name}`,
              );
            }
          } else {
            console.log(
              `‚ö†Ô∏è Anexo ignorado - tipo: ${attachment.type}, tem conte√∫do: ${!!attachment.content}`,
            );
          }
        }
      }

      // 2. Se n√£o encontrou em anexos, verificar na pr√≥pria mensagem
      if (allExtractedClients.length === 0) {
        console.log(
          "üîç Verificando dados de clientes na mensagem diretamente...",
        );
        console.log(
          `üìù Mensagem completa (primeiros 500 chars): ${message.substring(0, 500)}...`,
        );

        const containsClientDataInMessage = detectClientDataInText(message);
        console.log(
          `üîç Detec√ß√£o de dados de clientes na mensagem: ${containsClientDataInMessage}`,
        );

        if (containsClientDataInMessage) {
          console.log(`‚úÖ Dados de clientes detectados na mensagem`);
          const clients = extractClientsFromText(message);
          allExtractedClients = [...allExtractedClients, ...clients];
          processedFiles.push("mensagem do usu√°rio");
          console.log(`üìä Extra√≠dos ${clients.length} clientes da mensagem`);
        } else {
          console.log(`‚ùå Nenhum dado de cliente detectado na mensagem`);
        }
      }

      if (allExtractedClients.length > 0) {
        console.log(
          `‚úÖ Total de ${allExtractedClients.length} clientes prontos para importa√ß√£o autom√°tica`,
        );

        try {
          // Usar IDs reais da sess√£o autenticada
          const actionResult = await executeAIAction(
            "add_clients",
            { clients: allExtractedClients },
            businessId,
            userId,
          );

          if (actionResult.success) {
            console.log("‚úÖ Clientes importados automaticamente com sucesso");
            finalResponse = `üéâ **IMPORTA√á√ÉO AUTOM√ÅTICA CONCLU√çDA!**

${actionResult.message}

**üìä Resumo da opera√ß√£o:**
‚Ä¢ Arquivo(s) processado(s): ${processedFiles.join(", ")}
‚Ä¢ Clientes identificados: ${allExtractedClients.length}
‚Ä¢ Status: ‚úÖ Importa√ß√£o realizada com sucesso

**üöÄ O que aconteceu:**
Detectei automaticamente que voc√™ queria adicionar clientes e processei os dados do seu arquivo sem necessidade de convers√£o manual para JSON. Os clientes foram adicionados diretamente ao sistema!

**üìã Pr√≥ximos passos:**
‚Ä¢ Verifique os clientes na sua lista de Clientes
‚Ä¢ Configure agendamentos se necess√°rio
‚Ä¢ Revise os dados importados

üí° **Dica:** Na pr√≥xima vez, basta anexar o arquivo e dizer "adicione estes clientes" que farei tudo automaticamente!`;
          } else {
            console.error(
              "‚ùå Erro na importa√ß√£o autom√°tica:",
              actionResult.error,
            );
            finalResponse = `‚ùå **ERRO NA IMPORTA√á√ÉO AUTOM√ÅTICA**

Identifiquei ${allExtractedClients.length} clientes no(s) arquivo(s), mas ocorreu um erro durante a importa√ß√£o autom√°tica.

**üìã Dados encontrados:**
${allExtractedClients
  .slice(0, 3)
  .map((client) => `‚Ä¢ ${client.nome} - ${client.email}`)
  .join("\n")}
${allExtractedClients.length > 3 ? `\n...e mais ${allExtractedClients.length - 3} clientes` : ""}

**‚ö†Ô∏è Erro:** ${actionResult.message}

**üîß Solu√ß√µes:**
1. Verifique se os dados est√£o no formato correto
2. Tente novamente em alguns instantes  
3. Entre em contato com o suporte se o problema persistir

O sistema automaticamente detectou os dados, mas n√£o conseguiu completar a importa√ß√£o.`;
          }
        } catch (error: any) {
          console.error("‚ùå Erro t√©cnico na automa√ß√£o:", error);
          finalResponse = `‚ùå **ERRO T√âCNICO NA AUTOMA√á√ÉO**

**üîç Detalhes:**
‚Ä¢ Clientes identificados: ${allExtractedClients.length}
‚Ä¢ Arquivos processados: ${processedFiles.join(", ")}
‚Ä¢ Erro: ${error.message}

**ü§ñ Sistema de Automa√ß√£o:**
A detec√ß√£o autom√°tica funcionou corretamente e identifiquei os clientes, mas houve um erro t√©cnico durante a execu√ß√£o.

**üìû Pr√≥ximos passos:**
Tente novamente ou entre em contato com o suporte t√©cnico.`;
        }
      } else {
        finalResponse = `‚ö†Ô∏è **NENHUM CLIENTE ENCONTRADO NOS ARQUIVOS**

Entendi que voc√™ quer adicionar clientes, mas n√£o consegui identificar dados de clientes v√°lidos no(s) arquivo(s) anexado(s).

**‚úÖ Para uma importa√ß√£o autom√°tica bem-sucedida, o arquivo deve conter:**
‚Ä¢ Nomes dos clientes
‚Ä¢ Endere√ßos de email v√°lidos  
‚Ä¢ N√∫meros de telefone
‚Ä¢ Formato leg√≠vel (CSV, TXT, XLSX, etc.)

**üìã Exemplo de formato aceito:**
\`\`\`
Nome           Email              Telefone
Jo√£o Silva     joao@email.com     11999999999
Maria Santos   maria@email.com    11888888888
Pedro Costa    pedro@email.com    11777777777
\`\`\`

**üîÑ Como tentar novamente:**
1. Verifique se o arquivo tem os dados corretos
2. Anexe o arquivo corrigido
3. Digite: "adicione estes clientes"  
4. A automa√ß√£o funcionar√° instantaneamente!`;
      }
    } else {
      // *** FALLBACK: Verificar se a IA solicitou uma a√ß√£o manualmente ***
      const actionMatch = aiResponse.match(/‚öôÔ∏è EXECUTAR_A√á√ÉO: (\w+)/);
      const dataMatch = aiResponse.match(/üìä DADOS: ({[\s\S]*?})/);

      if (actionMatch && dataMatch) {
        const actionName = actionMatch[1];
        const actionDataStr = dataMatch[1];

        console.log(`üéØ IA solicitou execu√ß√£o manual da a√ß√£o: ${actionName}`);

        try {
          // Tentar fazer parse do JSON com tratamento de erros
          let actionData;
          try {
            actionData = JSON.parse(actionDataStr);
          } catch (jsonError) {
            console.log("‚ö†Ô∏è JSON malformado, tentando corre√ß√£o autom√°tica...");
            // Tentar corrigir JSON comum malformado
            const correctedJson = actionDataStr
              .replace(/([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '$1"$2":') // Add quotes to keys
              .replace(/:\s*([^",\[\]{}]+)(\s*[,}])/g, ': "$1"$2') // Add quotes to string values
              .replace(/: ""([0-9]+)""/, ": $1") // Fix quoted numbers
              .replace(/: ""(true|false)""/, ": $1"); // Fix quoted booleans

            actionData = JSON.parse(correctedJson);
            console.log("‚úÖ JSON corrigido automaticamente");
          }

          const actionResult = await executeAIAction(
            actionName,
            actionData,
            businessId,
            userId,
          );

          if (actionResult.success) {
            finalResponse = aiResponse.replace(
              /‚öôÔ∏è EXECUTAR_A√á√ÉO:[\s\S]*?üìä DADOS:[\s\S]*?üí¨ EXPLICA√á√ÉO: /,
              `‚úÖ A√á√ÉO EXECUTADA COM SUCESSO!\n\n${actionResult.message}\n\n`,
            );
          } else {
            finalResponse = aiResponse.replace(
              /‚öôÔ∏è EXECUTAR_A√á√ÉO:[\s\S]*?üìä DADOS:[\s\S]*?üí¨ EXPLICA√á√ÉO: /,
              `‚ùå ERRO NA EXECU√á√ÉO DA A√á√ÉO\n\n${actionResult.message}\n\n`,
            );
          }
        } catch (parseError) {
          console.error("‚ùå Erro definitivo no JSON:", parseError);
          finalResponse = aiResponse.replace(
            /‚öôÔ∏è EXECUTAR_A√á√ÉO:[\s\S]*?üìä DADOS:[\s\S]*?üí¨ EXPLICA√á√ÉO: /,
            `‚ùå ERRO NO PROCESSAMENTO DOS DADOS\n\nN√£o foi poss√≠vel processar os dados automaticamente. Tente usar comandos mais simples como "adicione estes clientes" com o arquivo anexado.\n\n`,
          );
        }
      }
    }

    console.log("üéâ Finalizando API com sucesso");
    console.log(
      "üì§ Resposta final (primeiros 200 chars):",
      finalResponse.substring(0, 200),
    );

    return Response.json({
      success: true,
      response: finalResponse,
    });
  } catch (error: any) {
    console.error("‚ùå Erro na API:", error);

    // Tratamento espec√≠fico para erros de timeout
    if (error.message?.includes("Timeout")) {
      return Response.json(
        {
          success: false,
          error:
            "A solicita√ß√£o demorou mais que o esperado. Tente novamente com uma mensagem mais curta.",
        },
        { status: 408 },
      );
    }

    // Tratamento para erros da API do Gemini
    if (error.message?.includes("API")) {
      return Response.json(
        {
          success: false,
          error: "Erro na comunica√ß√£o com a IA. Tente novamente em instantes.",
        },
        { status: 503 },
      );
    }

    return Response.json(
      {
        success: false,
        error: "Erro interno do servidor. Tente novamente.",
      },
      { status: 500 },
    );
  }
}
